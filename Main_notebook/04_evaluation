# ðŸ“Œ 04_evaluation.ipynb
# Objetivo: Evaluar el rendimiento del modelo utilizando mÃ©tricas de clasificaciÃ³n

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns

# ðŸ“‚ Cargar predicciones y etiquetas reales
predictions_path = "/content/drive/My Drive/PSF/model_predictions.csv"
labels_path = "/content/drive/My Drive/PSF/true_labels.csv"

y_pred = pd.read_csv(predictions_path)
y_true = pd.read_csv(labels_path)

print("âœ… Predicciones y etiquetas cargadas correctamente.")

# ðŸ“Š EvaluaciÃ³n del modelo
accuracy = accuracy_score(y_true, y_pred)
print(f"ðŸ”¹ PrecisiÃ³n del modelo: {accuracy:.4f}")

# ðŸ“Œ Matriz de confusiÃ³n
conf_matrix = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(6,6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['AF', 'NSR'], yticklabels=['AF', 'NSR'])
plt.xlabel("PredicciÃ³n")
plt.ylabel("Real")
plt.title("Matriz de ConfusiÃ³n")
plt.show()

# ðŸ“œ Reporte de clasificaciÃ³n
report = classification_report(y_true, y_pred, target_names=["Atrial Fibrillation", "Normal Sinus Rhythm"])
print("ðŸ“„ Reporte de ClasificaciÃ³n:")
print(report)

# ðŸš€ Guardar resultados
evaluation_results_path = "/content/drive/My Drive/PSF/evaluation_results.txt"
with open(evaluation_results_path, "w") as f:
    f.write(report)
print(f"âœ… Resultados de evaluaciÃ³n guardados en {evaluation_results_path}")
